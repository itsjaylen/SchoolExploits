[
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "export",
        "importPath": "core.utils.output",
        "description": "core.utils.output",
        "isExtraImport": true,
        "detail": "core.utils.output",
        "documentation": {}
    },
    {
        "label": "export",
        "importPath": "core.utils.output",
        "description": "core.utils.output",
        "isExtraImport": true,
        "detail": "core.utils.output",
        "documentation": {}
    },
    {
        "label": "export",
        "importPath": "core.utils.output",
        "description": "core.utils.output",
        "isExtraImport": true,
        "detail": "core.utils.output",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "winreg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "winreg",
        "description": "winreg",
        "detail": "winreg",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Debug",
        "importPath": "core.settings.debug",
        "description": "core.settings.debug",
        "isExtraImport": true,
        "detail": "core.settings.debug",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "core.settings.config",
        "description": "core.settings.config",
        "isExtraImport": true,
        "detail": "core.settings.config",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "core.settings.config",
        "description": "core.settings.config",
        "isExtraImport": true,
        "detail": "core.settings.config",
        "documentation": {}
    },
    {
        "label": "system",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "reg",
        "importPath": "core.functions.registry",
        "description": "core.functions.registry",
        "isExtraImport": true,
        "detail": "core.functions.registry",
        "documentation": {}
    },
    {
        "label": "Internet",
        "importPath": "core.functions.internet",
        "description": "core.functions.internet",
        "isExtraImport": true,
        "detail": "core.functions.internet",
        "documentation": {}
    },
    {
        "label": "pc_info",
        "importPath": "core.functions.information",
        "description": "core.functions.information",
        "isExtraImport": true,
        "detail": "core.functions.information",
        "documentation": {}
    },
    {
        "label": "startup",
        "importPath": "core.gui.gui",
        "description": "core.gui.gui",
        "isExtraImport": true,
        "detail": "core.gui.gui",
        "documentation": {}
    },
    {
        "label": "computer_information",
        "kind": 6,
        "importPath": "core.functions.information",
        "description": "core.functions.information",
        "peekOfCode": "class computer_information(object):\n    \"\"\"All information about the computer and stats\"\"\"\n    def __init__(self):\n        self.info = []\n    def get_info(self):\n        \"\"\"All information about the computer\"\"\"\n        self.info.append(f\"Operating System: {platform.system()}\")\n        self.info.append(f\"Operating System Version: {platform.version()}\")\n        self.info.append(f\"Cpu Architecture: {platform.machine()}\")\n        self.info.append(f\"Processor Type: {platform.processor()}\")",
        "detail": "core.functions.information",
        "documentation": {}
    },
    {
        "label": "pc_info",
        "kind": 5,
        "importPath": "core.functions.information",
        "description": "core.functions.information",
        "peekOfCode": "pc_info = computer_information()",
        "detail": "core.functions.information",
        "documentation": {}
    },
    {
        "label": "internet_commands",
        "kind": 6,
        "importPath": "core.functions.internet",
        "description": "core.functions.internet",
        "peekOfCode": "class internet_commands(object):\n    \"\"\"All command functions\"\"\"\n    def dump_wifi_password(self):\n        \"\"\"Dumps wifi passwords\"\"\"\n        data = subprocess.check_output(\n            [\"netsh\", \"wlan\", \"show\", \"profiles\"]).decode(\"utf-8\").split(\"\\n\")\n        profiles = [i.split(\":\")[1][1:-1]\n                    for i in data if \"All User Profile\" in i]\n        for i in profiles:\n            results = subprocess.check_output(",
        "detail": "core.functions.internet",
        "documentation": {}
    },
    {
        "label": "Internet",
        "kind": 5,
        "importPath": "core.functions.internet",
        "description": "core.functions.internet",
        "peekOfCode": "Internet = internet_commands()",
        "detail": "core.functions.internet",
        "documentation": {}
    },
    {
        "label": "regeditor",
        "kind": 6,
        "importPath": "core.functions.registry",
        "description": "core.functions.registry",
        "peekOfCode": "class regeditor(object):\n    \"\"\"Registry editors\"\"\"\n    def darkmode(self):\n        \"\"\"Enable dark theme\"\"\"\n        try:\n            with winreg.ConnectRegistry(None, winreg.HKEY_CURRENT_USER) as hkey:\n                with winreg.OpenKey(hkey, r\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize\",\n                                    0, winreg.KEY_ALL_ACCESS) as sub_key:\n                    value = winreg.EnumValue(sub_key, 2)\n                    print(value)",
        "detail": "core.functions.registry",
        "documentation": {}
    },
    {
        "label": "reg",
        "kind": 5,
        "importPath": "core.functions.registry",
        "description": "core.functions.registry",
        "peekOfCode": "reg = regeditor()",
        "detail": "core.functions.registry",
        "documentation": {}
    },
    {
        "label": "startup",
        "kind": 2,
        "importPath": "core.gui.gui",
        "description": "core.gui.gui",
        "peekOfCode": "def startup():\n    print(f\"{Fore.GREEN}Loaded {Config.appname} Version {Config.version}\\n\")\n    system(f\"title {Config.appname} version {Config.version}\")\n    gui()\ndef gui():\n    while True:\n        cmd = input(\"Command: \")\n        if cmd not in Command.command_list and cmd not in Debug.debug_commands_list:\n            print(\n                f\"{Fore.RED}No command '{cmd}' exist: {Fore.RESET} Type !help for command list\")",
        "detail": "core.gui.gui",
        "documentation": {}
    },
    {
        "label": "gui",
        "kind": 2,
        "importPath": "core.gui.gui",
        "description": "core.gui.gui",
        "peekOfCode": "def gui():\n    while True:\n        cmd = input(\"Command: \")\n        if cmd not in Command.command_list and cmd not in Debug.debug_commands_list:\n            print(\n                f\"{Fore.RED}No command '{cmd}' exist: {Fore.RESET} Type !help for command list\")\n        if cmd in Command.command_list:\n            try:\n                Command.command_dict[cmd]()\n            except KeyError:",
        "detail": "core.gui.gui",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 6,
        "importPath": "core.settings.config",
        "description": "core.settings.config",
        "peekOfCode": "class settings(object):\n    \"\"\"All configuration settings\"\"\"\n    def __init__(self):\n        self.version = \"1.2\"\n        self.appname = \"SchoolExploits\"\n        self.debug = True\n        self.color = init(autoreset=True, convert=True)\nConfig = settings()\nclass commands(object):\n    \"\"\"All created commands\"\"\"",
        "detail": "core.settings.config",
        "documentation": {}
    },
    {
        "label": "commands",
        "kind": 6,
        "importPath": "core.settings.config",
        "description": "core.settings.config",
        "peekOfCode": "class commands(object):\n    \"\"\"All created commands\"\"\"\n    def __init__(self):\n        self.command_list = [\"!help\",\n                             \"!dump_wifi_password\",\n                             \"!pc_info\",\n                             \"!darkmode\",\n                             \"!enable_store\",\n                             \"!destory\",\n                             ]",
        "detail": "core.settings.config",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 5,
        "importPath": "core.settings.config",
        "description": "core.settings.config",
        "peekOfCode": "Config = settings()\nclass commands(object):\n    \"\"\"All created commands\"\"\"\n    def __init__(self):\n        self.command_list = [\"!help\",\n                             \"!dump_wifi_password\",\n                             \"!pc_info\",\n                             \"!darkmode\",\n                             \"!enable_store\",\n                             \"!destory\",",
        "detail": "core.settings.config",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 5,
        "importPath": "core.settings.config",
        "description": "core.settings.config",
        "peekOfCode": "Command = commands()",
        "detail": "core.settings.config",
        "documentation": {}
    },
    {
        "label": "debugging",
        "kind": 6,
        "importPath": "core.settings.debug",
        "description": "core.settings.debug",
        "peekOfCode": "class debugging(object):\n    \"\"\"Debugging methods\"\"\"\n    def debug_store(self):\n        try:\n            export.store(\"Debug Store test\")\n            print(f\"Written successfully\")\n        except Exception as e:\n            print(e)\n    def __init__(self):\n        self.debug_commands_list = [\"!debug_store\"]",
        "detail": "core.settings.debug",
        "documentation": {}
    },
    {
        "label": "Debug",
        "kind": 5,
        "importPath": "core.settings.debug",
        "description": "core.settings.debug",
        "peekOfCode": "Debug = debugging()",
        "detail": "core.settings.debug",
        "documentation": {}
    },
    {
        "label": "Output",
        "kind": 6,
        "importPath": "core.utils.output",
        "description": "core.utils.output",
        "peekOfCode": "class Output(object):\n    \"\"\"Exportation functions\"\"\"\n    def store(self, data):\n        \"\"\"Write to disk\n        (data)-> disk \"\"\"\n        with open(\"Output.txt\", \"a\") as f:\n            f.write(f\"{data}\\n\")\nexport = Output()",
        "detail": "core.utils.output",
        "documentation": {}
    },
    {
        "label": "export",
        "kind": 5,
        "importPath": "core.utils.output",
        "description": "core.utils.output",
        "peekOfCode": "export = Output()",
        "detail": "core.utils.output",
        "documentation": {}
    }
]